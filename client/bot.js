// ██████╗░░█████╗░██╗░░░██╗██╗███╗░░██╗░█████╗░██╗
// ██╔══██╗██╔══██╗██║░░░██║██║████╗░██║██╔══██╗██║
// ██║░░██║███████║╚██╗░██╔╝██║██╔██╗██║██║░░╚═╝██║
// ██║░░██║██╔══██║░╚████╔╝░██║██║╚████║██║░░██╗██║
// ██████╔╝██║░░██║░░╚██╔╝░░██║██║░╚███║╚█████╔╝██║
// ╚═════╝░╚═╝░░╚═╝░░░╚═╝░░░╚═╝╚═╝░░╚══╝░╚════╝░╚═╝

// Created by nouhidev
// → https://nouhi.dev/davinci

// AI Functionality from OpenAI
// → https://openai.com/api/

// Main Bot Script

// Get OpenAI API
const { Configuration, OpenAIApi } = require("openai");

// Setup Dotenv
require("dotenv").config();

// Configure OpenAPI API
const configuration = new Configuration({
  apiKey: process.env.OPENAI_API_KEY,
});

const openai = new OpenAIApi(configuration);

// Setup DaVinci
const {
  Client,
  GatewayIntentBits,
  ActivityType,
  EmbedBuilder,
  Message,
} = require("discord.js");
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const shared_personality = process.env.SHARED_PERSONALITY;
const davinci_003_personality = process.env.DAVINCI_003_PERSONALITY;
const davinci_002_personality = process.env.DAVINCI_002_PERSONALITY;

// Start Message
client.on("ready", () => {
  console.log(
    `DaVinci has successfully started. Logged in as ${client.user.tag}! Version: ${process.env.VERSION}, running on ${client.guilds.cache.size} servers.`
  );

  client.user.setActivity("/help | nouhi.dev/davinci", {
    type: ActivityType.Playing,
  });
});

// Commands Handling
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  // Disable DMs
  if (!interaction.guild) {
    await interaction.reply(
      "Currently I only answer questions in Discord servers, sorry.\nYou can invite me into your server here: https://nouhi.dev/davinci"
    );
    return;
  }

  // /ask command
  if (interaction.commandName === "ask") {
    // Adds the AI's personality to the prompt
    user_prompt =
      davinci_003_personality +
      shared_personality +
      interaction.options.getString("prompt");

    // Attempt to answer prompt
    try {
      // Processing hint
      await interaction.reply({
        embeds: [embed_preset("I'm working on it.", "Processing your request...")],
        ephemeral: false,
      });

      // Get result
      const result = await get_davinci_003_response(user_prompt);
      // Remove the question mark
      // (Has to be a better way)
      if (result["0"] === "?") console.log("First letter is '?'");

      // Shorten prompt if it exceeds 256 characters to avoid Discord embed error
      temp_prompt = interaction.options.getString("prompt");

      if (interaction.options.getString("prompt").length > 256) {
        temp_prompt = interaction.options.getString("prompt").substring(0, 249) + " [...]";
      }

      // Respond with result
      await interaction.editReply({
        embeds: [embed_preset(temp_prompt, result.replace("?", " ").trim())],
        ephemeral: false,
      });
    } catch {
      console.log("An internal error occurred.\n Caused by prompt: " + interaction.options.getString("prompt"));
      await interaction.editReply({ content: "", embeds: [embed_preset("Sorry, that did not work.", "There was an error processing your request.")] });
    }
  }

  // /info command
  if (interaction.commandName === "info") {
    interaction.reply({ embeds: [infoEmbed] });
  }

  // /help command
  if (interaction.commandName === "help") {
    interaction.reply({ embeds: [helpEmbed] });
  }
});

// Returns a Response generated by OpenAI: Text-Davinci-003
async function get_davinci_003_response(prompt) {
  const response = await openai.createCompletion({
    model: "text-davinci-003",
    prompt: prompt,
    temperature: 0.2,
    max_tokens: 2000,
    top_p: 1,
    frequency_penalty: 0.5,
    presence_penalty: 0.1,
    stop: ['"""'],
  });

  return response.data.choices[0].text;
}

// Info Embed
const infoEmbed = new EmbedBuilder()
  .setColor(0xff8086)
  .setTitle("DaVinci v" + `${process.env.VERSION}`)
  .setURL("https://nouhi.dev/davinci/")
  .setAuthor({
    name: "/info",
    iconURL: "https://nouhi.dev/assets/pfp_hd.png",
    url: "https://nouhi.dev/davinci",
  })
  .setDescription(
    "The DaVinci discord bot utilizes the OpenAI API to provide natural language processing capabilities within Discord."
  )
  .setThumbnail("https://nouhi.dev/assets/pfp_hd.png")
  .setTimestamp()
  .setFooter({
    text: "Created by nouhidev | nouhi#0439",
    iconURL: "https://nouhi.dev/assets/pfp_hd.png",
  });

// Help Embed
const helpEmbed = new EmbedBuilder()
  .setColor(0xff8086)
  .setTitle("How to use DaVinci:")
  .setURL("https://nouhi.dev/davinci/")
  .setAuthor({
    name: "/help",
    iconURL: "https://nouhi.dev/assets/pfp_hd.png",
  })
  .setDescription(
    "You can use the following commands to interact with DaVinci:"
  )
  .setThumbnail("https://nouhi.dev/assets/pfp_hd.png")
  .addFields(
    { name: "/ask prompt:", value: "Ask a question", inline: true },
    { name: "/info", value: "Displays this message", inline: true },
    { name: "/help", value: "Displays a guide", inline: true }
  )
  .setTimestamp()
  .setFooter({
    text: "Created by nouhidev | nouhi#0439",
    iconURL: "https://nouhi.dev/assets/pfp_hd.png",
  });


function embed_preset(embedName, embedDescription) {
  const newEmbed = new EmbedBuilder()
  .setColor(0xff8086)
  .setAuthor({
    name: embedName,
    url: "https://nouhi.dev/davinci",
  })
  .setDescription(embedDescription);

  return newEmbed;
}
// Login DaVinci
client.login(process.env.DISCORD_KEY);
